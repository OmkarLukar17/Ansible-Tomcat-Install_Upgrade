---
- name: Upgrading the Nginx
  hosts: myhosts
  become: yes
  vars:
          nginx_dir: /app/middleware/nginx
          dest_dir: /app/middleware
          tar_dir: /tmp/nginx_1.26.tar.gz
          backup_dir: /app/middleware/nginx_backup
 
  tasks:
          - block:
 
            - name: Check nginx service status and version
              shell: |
                ps -aef | grep nginx | grep -v grep
                ./nginx -v
              args:
                    chdir: "{{nginx_dir}}"
              register: nginx_status
 
            - name: Print nginx service status
              ansible.builtin.debug:
                      var: nginx_status.stdout
 
            - name: Stop nginx service if running
              when: nginx_status.stdout != ""
              command: ./nginx -s stop
              args:
                      chdir: "{{nginx_dir}}"
              register: stop_nginx
              failed_when: stop_nginx.rc != 0
 
            - name: change the nginx directory to backup
              shell: mv "{{nginx_dir}}" "{{backup_dir}}"
              args:
                      chdir: "{{dest_dir}}"
              register: nginx_change
              failed_when: nginx_change.rc != 0
 
            - name: untar the new nginx
              shell: tar -xvzf "{{tar_dir}}" || true
              args:
                      chdir: "{{dest_dir}}"
              register: nginx_untar
              failed_when: nginx_untar.rc != 0
 
            - name: change the conf file name
              shell: cp nginx.conf nginx_ori.conf
              args:
                      chdir: "{{nginx_dir}}"
              register: og_conf_file
              failed_when: og_conf_file.rc != 0
 
            - name: copy the backup nginx conf to new version
              shell: cp "{{backup_dir}}"/nginx.conf .
              args:
                      chdir: "{{nginx_dir}}"
              register: nginx_conf
              failed_when: nginx_conf.rc != 0
 
            - name: copy the backup nginx html dir to new version
              shell: scp -r "{{backup_dir}}"/html .
              args:
                      chdir: "{{nginx_dir}}"
              register: nginx_html
              failed_when: nginx_html.rc != 0
 
            - name: check the nginx syntax
              shell: ./nginx -t
              args:
                      chdir: "{{nginx_dir}}"
              register: nginx_syntax
              failed_when: nginx_syntax.rc != 0
 
            - name: start the nginx again
              shell: ./nginx
              args:
                      chdir: "{{nginx_dir}}"
              register: nginx_start
              failed_when: nginx_start.rc != 0
 
            rescue:
 
              - name: Showing the error logs
                when: stop_nginx is defined and stop_nginx.rc != 0 or nginx_start is defined and nginx_start.rc != 0
                shell: tail -9 "{{nginx_dir}}"/logs/error.log
                args:
                        chdir: "{{nginx_dir}}"
                register: show_error
               
              - name: Print error logs  
                ansible.builtin.debug:
                        var: show_error.stdout
               
              - name: Showing the conf error
                when: nginx_syntax is defined and nginx_syntax.rc != 0
                ansible.builtin.debug:
                        var: nginx_syntax.stdout
 
              - name: Rollback - Restore old nginx directory
                when: nginx_change is defined and (nginx_change.rc != 0 or nginx_untar.rc != 0 or og_conf_file.rc != 0 or nginx_conf.rc != 0 or nginx_html.rc != 0 or nginx_syntax.rc != 0 or nginx_start.rc != 0)
                shell: mv {{ backup_dir }} {{ nginx_dir }}
                ignore_errors: yes
 
              - name: Rollback - Start old nginx service
                when: nginx_change is defined and (nginx_change.rc != 0 or nginx_untar.rc != 0 or og_conf_file.rc != 0 or nginx_conf.rc != 0 or nginx_html.rc != 0 or nginx_syntax.rc != 0 or nginx_start.rc != 0)
                shell: ./nginx
                args:
                  chdir: "{{ nginx_dir }}"
                ignore_errors: yes
 
            always:
 
              - name: Ensure nginx service status is logged
                shell: ps -aef | grep nginx | grep -v grep
                register: final_nginx_status
                ignore_errors: yes
 
              - name: Print final nginx status
                ansible.builtin.debug:
                  msg: "{{ final_nginx_status.stdout | default('No output') }}"